apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "traefik.fullname" . }}
  labels:
    app: {{ template "traefik.name" . }}
    chart: {{ template "traefik.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
data:
  traefik.toml: |
    # traefik.toml
    [global]
      sendAnonymousUsage = {{ .Values.sendAnonymousUsage }}
    [api]
      {{- if .Values.debug.enabled }}
      debug = true
      {{- end }}
      {{- if .Values.dashboard.enabled }}
      dashboard = true
      {{- end }}
    [log]
      {{- if not .Values.debug.enabled }}
      level = {{ .Values.logLevel | default "info" | quote }}
      {{- else }}
      level = "debug"
      {{- end }}
      {{- if .Values.traefikLogFormat }}
      format = {{ .Values.traefikLogFormat | quote }}
      {{- end }}
    [serverTransport]
      {{- if .Values.ssl.insecureSkipVerify }}
      insecureSkipVerify = true
      {{- end }}
      {{- if .Values.rootCAs }}
      {{ template "traefik.rootCAs" . }}
      {{- end }}
      {{- if .Values.maxIdleConnsPerHost }}
      maxIdleConnsPerHost = {{ .Values.maxIdleConnsPerHost }}
      {{- end }}
      {{- if .Values.timeouts }}
      {{- if .Values.timeouts.forwarding }}
      [serversTransport.forwardingTimeouts]
        {{- if .Values.timeouts.forwarding.dialTimeout }}
        dialTimeout = {{ .Values.timeouts.forwarding.dialTimeout | quote }}
        {{- end }}
        {{- if .Values.timeouts.forwarding.responseHeaderTimeout }}
        responseHeaderTimeout = {{ .Values.timeouts.forwarding.responseHeaderTimeout | quote }}
        {{- end }}
      {{- end }}
      {{- end }}
    [entryPoints]
      [entryPoints.http]
      address = ":{{ template "traefik.containerPort.http" . }}"
      {{- if .Values.proxyProtocol.enabled }}
        [entryPoints.http.proxyProtocol]
        {{ template "traefik.trustedips" . }}
      {{- end }}
      {{- if .Values.forwardedHeaders.enabled }}
        [entryPoints.http.forwardedHeaders]
        {{ template "traefik.forwardedHeadersTrustedIPs" . }}
      {{- end }}
      {{- if .Values.timeouts }}
      {{- if .Values.timeouts.responding }}
        [entryPoints.http.respondingTimeouts]
          {{- if .Values.timeouts.responding.readTimeout }}
          readTimeout = {{ .Values.timeouts.responding.readTimeout | quote }}
          {{- end }}
          {{- if .Values.timeouts.responding.writeTimeout }}
          writeTimeout = {{ .Values.timeouts.responding.writeTimeout | quote }}
          {{- end }}
          {{- if .Values.timeouts.responding.idleTimeout }}
          idleTimeout = {{ .Values.timeouts.responding.idleTimeout | quote }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.ssl.enabled }}
      [entryPoints.https]
      address = ":{{ template "traefik.containerPort.https" . }}"
      {{- if .Values.proxyProtocol.enabled }}
        [entryPoints.https.proxyProtocol]
        {{ template "traefik.trustedips" . }}
      {{- end }}
      {{- if .Values.forwardedHeaders.enabled }}
        [entryPoints.https.forwardedHeaders]
        {{ template "traefik.forwardedHeadersTrustedIPs" . }}
      {{- end }}
      {{- if .Values.timeouts }}
      {{- if .Values.timeouts.responding }}
        [entryPoints.https.respondingTimeouts]
          {{- if .Values.timeouts.responding.readTimeout }}
          readTimeout = {{ .Values.timeouts.responding.readTimeout | quote }}
          {{- end }}
          {{- if .Values.timeouts.responding.writeTimeout }}
          writeTimeout = {{ .Values.timeouts.responding.writeTimeout | quote }}
          {{- end }}
          {{- if .Values.timeouts.responding.idleTimeout }}
          idleTimeout = {{ .Values.timeouts.responding.idleTimeout | quote }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.dashboard.enabled }}
      [entryPoints.traefik]
      address = ":8080"
      {{- end }}
      {{- if .Values.metrics.prometheus.enabled }}
      [entryPoints.prometheus]
      address = ":9100"
      {{- end }}
    [ping]
    entryPoint = "{{ .Values.pingEntryPoint | default "http" }}"
    [providers]
      [providers.kubernetesCRD]
        {{- if .Values.kubernetes }}
        {{- if .Values.kubernetes.endpoint }}
        endpoint = {{ .Values.kubernetes.endpoint | quote }}
        {{- end}}
        {{- if .Values.kubernetes.namespaces }}
        namespaces = [
        {{- range $idx, $element := .Values.kubernetes.namespaces }}
        {{- if $idx }}, {{ end }}
        {{- $element | quote }}
        {{- end -}}
        ]
        {{- end}}
        {{- if .Values.kubernetes.labelSelector }}
        labelselector = {{ .Values.kubernetes.labelSelector | quote }}
        {{- end}}
        {{- if .Values.kubernetes.ingressClass }}
        ingressClass = {{ .Values.kubernetes.ingressClass | quote }}
        {{- end}}
        {{- end}}
      [providers.kubernetesIngress]
        {{- if .Values.kubernetes }}
        {{- if .Values.kubernetes.endpoint }}
        endpoint = {{ .Values.kubernetes.endpoint | quote }}
        {{- end}}
        {{- if .Values.kubernetes.namespaces }}
        namespaces = [
          {{- range $idx, $element := .Values.kubernetes.namespaces }}
              {{- if $idx }}, {{ end }}
              {{- $element | quote }}
          {{- end -}}
          ]
        {{- end}}
        {{- if .Values.kubernetes.labelSelector }}
        labelselector = {{ .Values.kubernetes.labelSelector | quote }}
        {{- end}}
        {{- if .Values.kubernetes.ingressClass }}
        ingressClass = {{ .Values.kubernetes.ingressClass | quote }}
        {{- end}}
        {{- if .Values.kubernetes.ingressEndpoint }}
          [kubernetes.kubernetesIngress.ingressEndpoint]
          {{- if .Values.kubernetes.ingressEndpoint.hostname }}
          hostname = {{ .Values.kubernetes.ingressEndpoint.hostname | quote }}
          {{- end}}
          {{- if .Values.kubernetes.ingressEndpoint.ip }}
          ip = {{ .Values.kubernetes.ingressEndpoint.ip | quote }}
          {{- end}}
          {{- if .Values.kubernetes.ingressEndpoint.publishedService }}
          publishedService = {{ .Values.kubernetes.ingressEndpoint.publishedService | quote }}
          {{- else if .Values.kubernetes.ingressEndpoint.useDefaultPublishedService }}
          publishedService = "{{ .Release.Namespace }}/{{ template "traefik.fullname" . }}"
          {{- end}}
        {{- end}}
        {{- end}}
      {{- if .Values.fileBackend }}
      [providers.file]
      {{- .Values.fileBackend | nindent 4 }}
      {{- end }}
    {{- if .Values.accessLogs.enabled }}
    [accessLog]
      {{- if .Values.accessLogs.filePath }}
      filePath = {{ .Values.accessLogs.filePath | quote }}
      {{- end}}
      format = {{ .Values.accessLogs.format | quote }}
      [accessLog.fields]
        defaultMode = {{ .Values.accessLogs.fields.defaultMode | quote }}
        [accessLog.fields.names]
        {{- range $field, $action := .Values.accessLogs.fields.names }}
          {{ printf "\"%s\" = \"%s\"" $field $action }}
        {{- end}}
        [accessLog.fields.headers]
          defaultMode = {{ .Values.accessLogs.fields.headers.defaultMode | quote }}
          [accessLog.fields.headers.names]
          {{- range $header, $action := .Values.accessLogs.fields.headers.names }}
            {{ printf "\"%s\" = \"%s\"" $header $action }}
          {{- end}}
    {{- end}}
    {{- if .Values.acme.enabled }}
    [certificatesResolvers]
      [certificatesResolvers.CertificateResolver0]
        [certificatesResolvers.CertificateResolver0.acme]
          email = {{ .Values.acme.email | quote }}
          keyType = {{ .Values.acme.keyType | quote }}
          storage = "/acme/acme.json"
          {{- if .Values.acme.caServer }}
          caServer = {{ .Values.acme.caServer | quote }}
          {{- else if eq (toString (.Values.acme.staging)) "true" }}
          caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
          {{- end -}}
          {{- if eq .Values.acme.challengeType "dns-01" }}
          [certificatesResolvers.CertificateResolver0.acme.dnsChallenge]
            provider = {{ .Values.acme.dnsProvider.name | quote }}
            {{- if .Values.acme.resolvers }}
            {{ template "traefik.acme.dnsResolvers" . }}
            {{- end }}
            {{- if .Values.acme.delayBeforeCheck }}
            delayBeforeCheck = {{ .Values.acme.delayBeforeCheck }}
            {{- end }}
          {{- else if eq .Values.acme.challengeType "http-01" }}
          [certificatesResolvers.CertificateResolver0.acme.httpChallenge]
            entryPoint = {{ .Values.acme.httpChallenge.entrypoint | quote }}
          {{- else if eq .Values.acme.challengeType "tls-alpn-01" }}
          [certificatesResolvers.CertificateResolver0.acme.tlsChallenge]
          {{- end }}
    {{- end }}
    {{- if or .Values.metrics.prometheus.enabled .Values.metrics.statsd.enabled .Values.metrics.datadog.enabled }}
    [metrics]
    {{- end }}
      {{- if .Values.metrics.prometheus.enabled }}
      [metrics.prometheus]
        entryPoint = "prometheus"
        {{- if .Values.metrics.prometheus.buckets }}
        buckets = [
          {{- range $idx, $element := .Values.metrics.prometheus.buckets }}
              {{- if $idx }},{{ end }}
              {{- printf "%f" $element }}
          {{- end -}}
          ]
        {{- end -}}
      {{- end }}
      {{- if .Values.metrics.datadog.enabled }}
      [metrics.datadog]
        {{- if .Values.metrics.datadog.address }}
        address = {{ .Values.metrics.datadog.address | quote }}
        {{- end}}
        {{- if .Values.metrics.datadog.pushinterval }}
        pushinterval = {{ .Values.metrics.datadog.pushinterval | quote }}
        {{- end}}
      {{- end }}
      {{- if .Values.metrics.statsd.enabled }}
      [metrics.statsD]
        {{- if .Values.metrics.statsd.address }}
        address = {{ .Values.metrics.statsd.address | quote }}
        {{- end}}
        {{- if .Values.metrics.statsd.pushinterval }}
        pushinterval = {{ .Values.metrics.statsd.pushinterval | quote }}
        {{- end}}
      {{- end }}
    {{- if .Values.tracing.enabled }}
    [tracing]
      serviceName = {{ .Values.tracing.serviceName | quote}}
      {{- if eq .Values.tracing.backend "jaeger" }}
      [tracing.jaeger]
        {{- if .Values.tracing.jaeger.localAgentHostPort }}
        localAgentHostPort = {{ .Values.tracing.jaeger.localAgentHostPort | quote }}
        {{- end }}
        {{- if .Values.tracing.jaeger.samplingServerUrl }}
        samplingServerUrl = {{ .Values.tracing.jaeger.samplingServerUrl | quote }}
        {{- end }}
        {{- if .Values.tracing.jaeger.samplingType }}
        samplingType = {{ .Values.tracing.jaeger.samplingType | quote }}
        {{- end }}
        {{- if ne (.Values.tracing.jaeger.samplingParam | quote) "" }}
        samplingParam = {{ .Values.tracing.jaeger.samplingParam }}
        {{- end }}
      {{- end }}
      {{- if eq .Values.tracing.backend "zipkin" }}
      [tracing.zipkin]
        {{- if .Values.tracing.zipkin.httpEndpoint }}
        httpEndpoint = {{ .Values.tracing.zipkin.httpEndpoint | quote }}
        {{- end }}
        {{- if ne (.Values.tracing.zipkin.debug | quote) "" }}
        debug = {{ .Values.tracing.zipkin.debug }}
        {{- end }}
        {{- if ne (.Values.tracing.zipkin.sameSpan | quote) "" }}
        sameSpan = {{ .Values.tracing.zipkin.sameSpan }}
        {{- end }}
        {{- if ne (.Values.tracing.zipkin.id128bit | quote) "" }}
        id128bit = {{ .Values.tracing.zipkin.id128bit }}
        {{- end }}
      {{- end }}
      {{- if eq .Values.tracing.backend "datadog" }}
      [tracing.datadog]
        {{- if .Values.tracing.datadog.localAgentHostPort }}
        localAgentHostPort = {{ .Values.tracing.datadog.localAgentHostPort | quote }}
        {{- end }}
        {{- if ne (.Values.tracing.datadog.debug | quote) "" }}
        debug = {{ .Values.tracing.datadog.debug }}
        {{- end }}
        {{- if ne (.Values.tracing.datadog.globalTag | quote) "" }}
        globalTag = {{ .Values.tracing.datadog.globalTag | quote }}
        {{- end }}
      {{- end }}
    {{- end }}
